<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.ict.finalpj.domain.camplog.mapper.CampLogMapper">
    <!-- 로그 내용 -->
    <select id="getDealListByuserIdx" resultType="DealVO" parameterType="String">
        select * from pjdeal where dealSellerUserIdx = #{userIdx}
    </select>
    <select id="getFileNamesByDealIdxes"  resultType="String" parameterType="List">
        select fileName from pjfile where  fileTableType = 2 
        <!-- and fileTableIdx In -->
        <if test="list != null and list.size() > 0">
            and fileTableIdx In
            
            <foreach collection="list" item="dealIdx" open="(" close=")" separator=",">
                #{dealIdx}
            </foreach>
        </if>
            <!-- order by field(fileTableIdx, 
            <foreach collection="list" item="dealIdx" separator=",">
                 #{dealIdx}
            </foreach>
            ) -->
            <if test="list != null and list.size() > 0">
                order by field(fileTableIdx, 
                <foreach collection="list" item="dealIdx" separator=",">
                    #{dealIdx}
                </foreach>
                )
            </if>
    </select>
    <select id="getFileNamesByDealIdx" parameterType="String" resultType="String" >
        select fileName from pjfile where fileTableType = 2 and fileOrder = 0 and fileTableIdx = #{dealIdx}
    </select>
    <select id="getCampListAll"  resultType="CampVO">
        select * from pjcamp order by campIdx
    </select>
    <insert id="insertToPjcamplog" parameterType="CampLogVO">
        insert into pjlog(userIdx, campIdx, logTitle, logRegDate) values(#{userIdx}, #{campIdx}, #{logTitle}, now())
    </insert>
    <insert id="insertToPjlogcontent" parameterType="CampLogContentVO">
        insert into pjlogcontent (logIdx, logContent, logContentOrder) values
        <foreach  collection="contentData" item="content" separator=",">
            (#{logIdx}, #{content.logContent}, #{content.logContentOrder})
        </foreach>
    </insert>
    <insert id="insertToPjfile" parameterType="FileVo">
        insert into pjfile (fileTableType, fileTableIdx, fileName, fileCreated, fileOrder, isThumbnail) values
        <foreach  collection="fileData" item="data" separator=",">
            (1,  #{fileTableIdx}, #{data.fileName}, now(), #{data.fileOrder}, #{data.isThumbnail})
        </foreach>
    </insert>
    <insert id="insertToPjtaginfo" parameterType="TaginfoVO">
        insert into pjtaginfo (logIdx, fieldIdx, tagContent, tagX, tagY, dealIdx, tagId, userIdx) values
        <foreach  collection="tagData" item="data" separator=",">
            (#{logIdx},  #{data.fieldIdx}, #{data.tagContent}, #{data.tagX}, #{data.tagY}, #{data.dealIdx}, #{data.tagId}, #{userIdx})
        </foreach>
    </insert>
    <select id="getLogDetailByLogIdx"  resultType="CampLogVO" parameterType="String">
        select * from pjlog where logIdx = #{logIdx}
    </select>
    <select id="getLogContentByLogIdx"  resultType="CampLogContentVO" parameterType="String">
        select * from pjlogcontent where logIdx = #{logIdx} order by logContentOrder
    </select>
    <select id="isUserRemommend"  resultType="int" parameterType="map">
        select count(*) from pjlogrecommend where logIdx = #{logIdx} and userIdx = #{userIdx}
    </select>
    <select id="getLogFileByLogIdx"  resultType="FileVo" parameterType="String">
        select * from pjfile where fileTableType = 2 and fileTableIdx = #{logIdx}
    </select>
    <select id="getLogTagByLogIdx"  resultType="TaginfoVO" parameterType="String">
        select * from pjtaginfo where logIdx = #{logIdx}
    </select>
    <select id="getDealList"  resultType="DealVO" >
        select * from pjdeal 
    </select>
    <select id="getUserDataByUserIdx"  resultType="UserVO" parameterType="String">
        select * from pjuser where userIdx = #{userIdx}
    </select>
    <select id="getFileNamesBydealIdxes"  resultType="String" parameterType="List">
        select fileName from pjfile where fileTableType = 1 
        <!-- and fileTableIdx In -->
        <if test="list != null and list.size() > 0">
            and fileTableIdx In

        <foreach collection="list" item="dealIdx"  open="(" close=")" separator=",">
            #{dealIdx}
        </foreach>

        </if>
         <!-- order by field(fileTableIdx, 
            <foreach collection="list" item="dealIdx" separator=",">
                 #{dealIdx}
            </foreach>
            ) -->
        <if test="list != null and list.size() > 0">
            order by field(fileTableIdx, 
            <foreach collection="list" item="dealIdx" separator=",">
                #{dealIdx}
            </foreach>
            )
        </if>
    </select>
    <delete id="toogleOff"   parameterType="map">
        delete from pjlogrecommend where logIdx = #{logIdx} and userIdx = #{userIdx}
    </delete>
    <insert id="toogleOn" parameterType="map">
        insert into pjlogrecommend (logIdx, userIdx) values(#{logIdx}, #{userIdx} )
    </insert>
    <update id="getLogActiveZero" parameterType="String">
        update pjlog set logIsActive = 0 where logIdx = #{logIdx}
    </update>
    <select id="countLogRecommend" parameterType="String" >
        select count(*) from pjlogrecommend where logIdx = #{logIdx}
    </select>
    <!-- 로그(후기)글 신고 등록 -->
    <insert id="getLogReport" parameterType="ReportVO">
        insert into pjreport (userIdx, reportCategory, reportTableType, reportTableIdx, reportContent, reportRegDate)
        values (3, #{reportCategory}, 3, #{reportTableIdx}, #{reportContent}, NOW());
    </insert>
    <!-- 로그(후기)글 신고 횟수 가져오기 -->
    <select id="getLogReportCount" parameterType="ReportVO" resultType="ReportVO">
        SELECT COUNT(*) AS reportCount
        FROM pjreport
        WHERE reportTableType = 3 and reportTableIdx = #{reportTableIdx};
    </select>

    <!-- 댓글 -->
    <!-- 댓글 리스트 가져오기 -->
    <select id="getCommentList" parameterType="String" resultType="CampLogCommentVO">
        select * from pjlogComment where logIdx = #{logIdx}
    </select>

    <!-- 댓글 등록 -->
    <insert id="getCommentWrite" parameterType="CampLogCommentVO">
        insert into pjlogComment (logIdx, userIdx, logCommentContent, logCommentRegDate, commentIdx)
        values (#{logIdx}, 3, #{logCommentContent}, NOW(), #{commentIdx});
    </insert>

    <!-- 댓글 삭제(업데이트) -->
    <update id="getCommentDelete" parameterType="String">
        update pjlogComment
        set logCommentIsDelete = 1
        where logCommentIdx = #{logCommentIdx}
    </update>

    <!-- 댓글 신고 등록 -->
    <insert id="getCommentReport" parameterType="ReportVO">
        insert into pjreport (userIdx, reportCategory, reportTableType, reportTableIdx, reportContent, reportRegDate)
        values (3, #{reportCategory}, 4, #{reportTableIdx}, #{reportContent}, NOW());
    </insert>

    <!-- 댓글에 저장된 userIdx로 유저 닉네임 가져오기 -->
    <select id="getUserInfoByIdx" parameterType="list" resultType="UserVO">
        select * from pjuser where userIdx in
        <foreach item = "userIdx" collection = "list" open = "(" separator = "," close = ")">
            #{userIdx}
        </foreach>
    </select>

    <!-- 로그 댓글 신고 횟수 가져오기 -->
    <select id="getCommentReportCount" parameterType="ReportVO" resultType="ReportVO">
        SELECT reportTableIdx, reportStatus, userIdx, COUNT(*) AS reportCount
        FROM pjreport
        WHERE reportTableType = 4
        GROUP BY reportTableIdx, reportStatus, userIdx
        ORDER BY reportTableIdx ASC;
    </select>
    <select id="getCamplogList" parameterType="CampLogListVO" resultType="CampLogListVO">
    select * from 
		(
        	select 
            	cl.logIdx,  cl.logTitle, cl.logRegdate, u.userNickname, c.campIdx, c.facltNm, cn.logContent, f.fileName, 
           		re.reportStatus, 
				<!-- re.userIdx as reporterUserIdx,  -->
				GROUP_CONCAT(DISTINCT re.userIdx) as reporterUserIds, 
				re.reportedUserIdx,  
				re.reportTableIdx, re2.reportCount, 
            	(select count(*) from pjcamplogrecommend cr where cr.logIdx = cl.logIdx) as totalLikes, 
            	(select count(*) from pjcamplogcomment cm where cm.logIdx = cl.logIdx and cm.logCommentIsActive = 1) as totalCount, 
            	<!-- ROW_NUMBER() over (partition by cl.logIdx, re.userIdx order by re.reportRegDate desc) as rn  -->
				ROW_NUMBER() over (partition by cl.logIdx order by cl.logIdx desc) as rn 
        	from pjcamplog cl 
        	left join pjuser u on cl.userIdx = u.userIdx 
        	left join pjcamplogcontent cn on cl.logIdx = cn.logIdx 
        	left join pjfile f on f.fileTableType = 1 and cl.logIdx = f.fileTableIdx and f.isThumbnail = 1 
        	left join pjcamp c on cl.campIdx = c.campIdx 
        	left join pjreport re on re.reportTableType = 3 and re.reportTableIdx = cl.logIdx 
        	left join (
            	select reportTableIdx, count(*) as reportCount from pjreport group by reportTableIdx 
        	) re2 on cl.logIdx = re2.reportTableIdx 
        	where cl.logIsActive = 1 
            	and (re.reportStatus != 1 or re.reportStatus is null) 
            	<if test="option == 'all' and keyword != null"> 
                	and (cl.logTitle like concat('%', #{keyword}, '%') 
                	or cn.logContent like concat('%', #{keyword}, '%'))
            	</if>
            	<if test="option == 'title' and keyword != null"> 
                	and cl.logTitle like concat('%', #{keyword}, '%')
           		</if>
            	<if test="option == 'content' and keyword != null"> 
                	and cn.logContent like concat('%', #{keyword}, '%')
            	</if>
			group by 
         		cl.logIdx, cl.logTitle, cl.logRegdate, u.userNickname, c.campIdx, c.facltNm, 
           		cn.logContent, f.fileName, re.reportStatus, re.reportedUserIdx, re.reportTableIdx, re2.reportCount	
        	order by 
            	<choose>
                	<when test="sortOption == 'latest'"> 
                    	cl.logIdx desc
                	</when>
                	<when test="sortOption == 'likes'">
                    	totalLikes desc, cl.logIdx desc
                	</when>
            	</choose>
    	) ranked
    		where ranked.rn = 1 
    		order by ranked.logIdx desc 
    		limit #{size} offset #{offset}
	</select>

	<select id="getCampLogCount" parameterType="CampLogListVO" resultType="int">
		select count(distinct cl.logIdx) from pjcamplog cl 
		left join pjcamplogcontent cn on cl.logIdx = cn.logIdx 
		left join pjreport re on re.reportTableType = 3 and re.reportTableIdx = cl.logIdx
		where cl.logIsActive = 1 
			and (re.reportStatus != 1 or re.reportStatus is null)
				<if test="option == 'all' and keyword != null and keyword != ''"> 
					and (cl.logTitle like concat('%', #{keyword}, '%')
						or cn.logContent like concat('%', #{keyword}, '%')) 
				</if>
				<if test="option == 'title' and keyword != null and keyword != ''">
					and cl.logTitle like concat('%', #{keyword}, '%') 
				</if>
				<if test="option == 'content' and keyword != null and keyword != ''">
					and cn.logContent like concat('%', #{keyword}, '%')
				</if>
	</select>
</mapper>